package com.example.gutnutritionmanager;

import android.content.Context;
import android.os.Environment;
import com.itextpdf.io.font.PdfEncodings;
import com.itextpdf.kernel.font.PdfFont;
import com.itextpdf.kernel.font.PdfFontFactory;
import com.itextpdf.kernel.pdf.PdfDocument;
import com.itextpdf.kernel.pdf.PdfWriter;
import com.itextpdf.layout.Document;
import com.itextpdf.layout.element.Paragraph;
import com.itextpdf.layout.element.Table;
import com.itextpdf.layout.properties.TextAlignment;
import com.itextpdf.layout.properties.UnitValue;


import java.io.File;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.Locale;

public class PdfReportGenerator {

    private Context context;
    private PdfFont font;

    public PdfReportGenerator(Context context) {
        this.context = context;
        try {
            // You can use system font or add custom fonts
            this.font = PdfFontFactory.createFont("Helvetica");
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public File generateDoctorReport(List<FoodLogEntity> foodLogs, String period) {
        try {
            // Create file name with timestamp
            String timeStamp = new SimpleDateFormat("yyyyMMdd_HHmmss", Locale.getDefault()).format(new Date());
            String fileName = "Gut_Report_" + timeStamp + ".pdf";

            // ✅ USE APP-SPECIFIC STORAGE (No permissions needed)
            File appSpecificDir = context.getExternalFilesDir(Environment.DIRECTORY_DOCUMENTS);
            if (appSpecificDir == null) {
                // Fallback to internal storage
                appSpecificDir = context.getFilesDir();
            }

            File file = new File(appSpecificDir, fileName);

            // Initialize PDF writer and document
            PdfWriter writer = new PdfWriter(file);
            PdfDocument pdfDoc = new PdfDocument(writer);
            Document document = new Document(pdfDoc);

            // Set font
            if (font != null) {
                document.setFont(font);
            }

            // Add content to PDF
            addPdfContent(document, foodLogs, period);

            // Close document
            document.close();

            return file;

        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }

    private void addPdfContent(Document document, List<FoodLogEntity> foodLogs, String period) {
        // 1. TITLE
        Paragraph title = new Paragraph("GUT NUTRITION MANAGER - MEDICAL REPORT")
                .setTextAlignment(TextAlignment.CENTER)
                .setBold()
                .setFontSize(16)
                .setMarginBottom(20);
        document.add(title);

        // 2. REPORT INFO
        Paragraph periodInfo = new Paragraph("Report Period: " + period)
                .setFontSize(12)
                .setMarginBottom(5);
        document.add(periodInfo);

        String generatedTime = new SimpleDateFormat("MMM dd, yyyy 'at' HH:mm", Locale.getDefault()).format(new Date());
        Paragraph dateInfo = new Paragraph("Generated: " + generatedTime)
                .setFontSize(12)
                .setMarginBottom(20);
        document.add(dateInfo);

        // 3. SUMMARY TABLE
        if (foodLogs != null && !foodLogs.isEmpty()) {
            addSummarySection(document, foodLogs);
            addDetailedLogsSection(document, foodLogs);
            addRecommendationsSection(document, foodLogs);
        } else {
            Paragraph noData = new Paragraph("No food data available for the selected period.")
                    .setItalic()
                    .setMarginBottom(10);
            document.add(noData);
        }

        // 4. FOOTER
        Paragraph footer = new Paragraph("Generated by Gut Nutrition Manager App - Confidential Medical Information")
                .setTextAlignment(TextAlignment.CENTER)
                .setFontSize(8)
                .setItalic()
                .setMarginTop(20);
        document.add(footer);
    }

    private void addSummarySection(Document document, List<FoodLogEntity> foodLogs) {
        Paragraph sectionTitle = new Paragraph("SUMMARY STATISTICS")
                .setBold()
                .setFontSize(14)
                .setMarginBottom(10);
        document.add(sectionTitle);

        // Calculate statistics
        int totalMeals = foodLogs.size();
        int lowFodmapCount = 0;
        int totalStress = 0;

        for (FoodLogEntity food : foodLogs) {
            if ("LOW".equals(food.getFodmapStatus())) {
                lowFodmapCount++;
            }
            totalStress += food.getStressLevel();
        }

        double avgStress = (double) totalStress / totalMeals;
        int gutSafePercentage = (lowFodmapCount * 100) / totalMeals;

        // Create summary table
        float[] columnWidths = {70, 30};
        Table table = new Table(UnitValue.createPercentArray(columnWidths));

        table.addCell(createCell("Total meals logged:", true));
        table.addCell(createCell(String.valueOf(totalMeals), false));

        table.addCell(createCell("Gut-safe foods:", true));
        table.addCell(createCell(lowFodmapCount + "/" + totalMeals + " (" + gutSafePercentage + "%)", false));

        table.addCell(createCell("Average stress level:", true));
        table.addCell(createCell(String.format("%.1f/5", avgStress), false));

        document.add(table);
        document.add(new Paragraph("\n"));
    }

    private void addDetailedLogsSection(Document document, List<FoodLogEntity> foodLogs) {
        Paragraph sectionTitle = new Paragraph("DETAILED FOOD LOG")
                .setBold()
                .setFontSize(14)
                .setMarginBottom(10);
        document.add(sectionTitle);

        // Create table for food logs
        float[] columnWidths = {25, 30, 20, 15, 10};
        Table table = new Table(UnitValue.createPercentArray(columnWidths));

        // Table header
        table.addHeaderCell(createCell("Food", true));
        table.addHeaderCell(createCell("Preparation", true));
        table.addHeaderCell(createCell("Meal Type", true));
        table.addHeaderCell(createCell("FODMAP", true));
        table.addHeaderCell(createCell("Stress", true));

        // Table rows
        for (FoodLogEntity food : foodLogs) {
            table.addCell(createCell(food.getFoodName(), false));
            table.addCell(createCell(food.getPreparation(), false));
            table.addCell(createCell(food.getMealType(), false));
            table.addCell(createCell(food.getFodmapStatus(), false));
            table.addCell(createCell(food.getStressLevel() + "/5", false));
        }

        document.add(table);
        document.add(new Paragraph("\n"));
    }

    private void addRecommendationsSection(Document document, List<FoodLogEntity> foodLogs) {
        Paragraph sectionTitle = new Paragraph("RECOMMENDATIONS")
                .setBold()
                .setFontSize(14)
                .setMarginBottom(10);
        document.add(sectionTitle);

        // Calculate average stress for recommendations
        int totalStress = 0;
        for (FoodLogEntity food : foodLogs) {
            totalStress += food.getStressLevel();
        }
        double avgStress = (double) totalStress / foodLogs.size();

        Paragraph rec1 = new Paragraph("• Continue tracking meals and symptoms for personalized insights")
                .setMarginBottom(5);
        document.add(rec1);

        if (avgStress > 3.0) {
            Paragraph rec2 = new Paragraph("• Practice stress-reduction techniques before meals")
                    .setMarginBottom(5);
            document.add(rec2);
        }

        Paragraph rec3 = new Paragraph("• Share this report with your healthcare provider during consultations")
                .setMarginBottom(5);
        document.add(rec3);
    }

    private com.itextpdf.layout.element.Cell createCell(String text, boolean isHeader) {
        com.itextpdf.layout.element.Cell cell = new com.itextpdf.layout.element.Cell();
        Paragraph paragraph = new Paragraph(text);

        if (isHeader) {
            paragraph.setBold();
        }

        cell.add(paragraph);
        cell.setPadding(5);

        return cell;
    }
}